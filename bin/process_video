#!/usr/bin/env ruby

# process_video /path/to/directory/of/video/files/

# Requires a recent ffmpeg and mail.
require 'etc'

# batch directory for processing
directory = File.expand_path(ARGV[0])

# Get the username of the owner of the batch directory. Used later for sending email.
uid = File.stat(directory).uid
username_for_batch = Etc.getpwuid(uid).name

# What directory should we place the output in?
base_output_directory = ENV['PROCESS_VIDEO_OUTPUT_DIRECTORY'] || '/var/processing_output'
batch_output_directory = File.basename(directory)

# Create output directory.
output_directory =  File.join(base_output_directory, batch_output_directory)
Dir.mkdir(output_directory) unless File.exist?(output_directory)

# Create a directory for placing ffmpeg log files.
log_directory = File.join(output_directory, 'log')
Dir.mkdir(log_directory) unless File.exist?(log_directory)

# Create directory for snapshots.
snapshot_directory = File.join(output_directory, 'snapshots')
Dir.mkdir(snapshot_directory) unless File.exist?(snapshot_directory)

# Get the list of all the files that ought to be processed
source_video_files = []
['*.mp4','*.flv', '*.mov', '*.avi', '*.mkv','*.m4v'].each do |source_extension|
  source_video_files << Dir.glob(File.join(directory, source_extension))
end
source_video_files.flatten!.compact!

# iterate over each of the files that ought to be processed
source_video_files.each do |filepath|
  # get the basename
  extension = File.extname(filepath)
  basename = File.basename(filepath, extension)

  # Create the video output directory
  video_output_directory     = File.join(output_directory, basename)
  Dir.mkdir(video_output_directory) unless File.exist?(video_output_directory)

  # Create the snaptshots directory.
  video_snapshots_directory = File.join(snapshot_directory, basename)
  Dir.mkdir(video_snapshots_directory) unless File.exist?(video_snapshots_directory)
  video_snapshots_base_filename = File.join(video_snapshots_directory, basename)

  # determine filenames for each output format
  video_output_filename_root = File.join(video_output_directory, basename)
  video_output_filename_mp4  = video_output_filename_root + '.mp4'
  video_output_filename_webm = video_output_filename_root + '.webm'

  # determine the filenames for each of the log files created
  log_file_mp4 = File.join(log_directory, basename + '-ffmpeg-mp4-%t.log')
  log_file_webm = File.join(log_directory, basename + '-ffmpeg-webm-%t.log')
  log_file_snapshot = File.join(log_directory, basename + '-snapshot-%t.log')

  # Create MP4 suitable for web playback and log output.
  `FFREPORT=file=#{log_file_mp4} ffmpeg -i #{filepath} -c:v libx264 -preset slow -crf 23 -profile:v baseline -level 3.0 -filter:v "scale=640:-1" -acodec libfdk_aac -b:a 128k -movflags +faststart "#{video_output_filename_mp4}"`

  # Create WebM and log output.
  `FFREPORT=file=#{log_file_webm} ffmpeg -i "#{filepath}" -c:v libvpx -crf 10 -b:v 1M -filter:v "scale=640:-1" -c:a libvorbis -b:a 128k "#{video_output_filename_webm}"`

  # Create images every 5 seconds from the MP4 output.
  `FFREPORT=file=#{log_file_snapshot} ffmpeg -i "#{video_output_filename_mp4}" -f image2 -vf fps=fps=1/5 #{video_snapshots_base_filename}-%05d.png`

  # Create poster sprite and related webvtt file
  poster_sprite_command_path = File.join(File.expand_path(File.dirname(__FILE__)), 'poster_sprite')
  `#{poster_sprite_command_path} #{video_snapshots_directory}`
end

# Sends an email when the job is done. This may only work this way with the -r option on redhat.
`echo "To get the files run: scp -r #{username_for_batch}@av1.lib.ncsu.edu:#{output_directory} ." | mail -s "Your transcoding job is done" -r jnronall@ncsu.edu  #{username_for_batch}@ncsu.edu`