#!/usr/bin/env ruby

# Script that can be run under cron for processing JP2 images from TIFs

require 'date'
require 'fileutils'
require 'tempfile'
require 'mail'
require 'iiif_url'
require 'httpclient'
require 'chunky_png'

lock_file_name = '/tmp/process_jp2.lock'
# TODO: FIXME: when this is just https://iiif.lib.ncsu.edu/iiif
@base_iiif_url = "https://iiif-prod01.lib.ncsu.edu/iiif"

# If the lock file does not exist we create it.
unless File.exist?(lock_file_name)
  FileUtils.touch(lock_file_name)
end

# Unless we get a lock on the lockfile we exit immediately.
# We keep a file handle open so that we retain the lock the whole time.
flock_file = File.open(lock_file_name, 'w')
unless flock_file.flock(File::LOCK_NB|File::LOCK_EX)
  puts "Can't get lock so exiting! Nothing processed"
  exit
end

# Logging
email_addresses = %w[ jnronall@ncsu.edu bjdietz@ncsu.edu ]
current_date_for_log_path = DateTime.now.iso8601
base_log_path = '/html/tifs-logs'
process_jp2s_error_log_path = File.join base_log_path, "process_jp2s_error-#{current_date_for_log_path}.txt"
process_jp2s_success_log_path = File.join base_log_path, "process_jp2s_success-#{current_date_for_log_path}.txt"

# set up some paths
base_new_jp2_directory ="/access-images/jp2s/"
tifs_glob = '/html/tifs/**/*.tif'
tif_paths = Dir.glob(tifs_glob)
base_completed_directory = "/html/tifs-completed"
@http_client = HTTPClient.new

# Set up counters
error_count = 0
success_count = 0

# exit if tif paths is empty
if tif_paths.empty?
  puts "No tifs"
  exit
else
  # Open our log files and get started
  error_log = File.open(process_jp2s_error_log_path, 'w')
  success_log = File.open(process_jp2s_success_log_path, 'w')
end

def create_error_log_line(basename, iiif_jp2_filepath, djatoka_jp2_filepath)
  errors = []
  errors << 'iiif-no-size' if !File.size?(iiif_jp2_filepath)
  errors << 'djatoka-no-size' if !File.size?(djatoka_jp2_filepath)
  errors << 'iiif-png-no-parse' if !iiif_png_parses?(basename)
  errors.join('  ')
end

# By warming the cache we'll also be clearing out all associated JPGs derived
# from the previous JP2.
def clear_iiif_cache_for_image(basename)
  url = File.join @base_iiif_url, "/warm/#{basename}"
  puts url
  response = @http_client.get url
  puts response.body
end

# Get a small PNG image from the IIIF image server and test
# that it has at least 3 colors.
def iiif_png_parses?(basename)
  # First clear the cache so that we are getting a derivative from the latest JP2.
  # Trigger clearing the IIIF JPG and info.json cache for this image in case it is being reprocessed.
  clear_iiif_cache_for_image(basename)

  png_params = {identifier: basename, base_url: @base_iiif_url, size: '75,', format: 'png'}
  png_url = IiifUrl.from_params png_params
  response = @http_client.get png_url
  image = ChunkyPNG::Image.from_blob response.body
  # Are there more than 3 colors in this image. if not fail
  pixels = image.pixels
  colors = pixels.uniq
  pixels.length > 375 && colors.length > 3
end

tif_paths.sort.each do |tif_path|
  basename = File.basename(tif_path, '.tif')
  two_characters = basename.slice(0, 2)

  ## IIIF setup
  iiif_jp2_directory = File.join(base_new_jp2_directory, two_characters)
  iiif_jp2_filepath = File.join(iiif_jp2_directory, basename + '.jp2')

  # TODO: If the JP2 exists do we just overwrite?
  # TODO: If the JP2 exists maybe add to a re-process list?

  # create the IIIF directory if it doesn't already exist
  if !File.exist?(iiif_jp2_directory)
    # set permissions on the new jp2 directory for the iiif user to rwx
    FileUtils.mkdir iiif_jp2_directory, mode: 0770
  end

  ## Djatoka setup
  djatoka_jp2_filepath = File.join('/storage/temporary', basename + '.jp2')

  # Create a RGBA tif for kakadu
  tmp_tif = Tempfile.new([basename, '.tif'])
  `tiff2rgba -c none #{tif_path} #{tmp_tif.path}`

  # Create IIIF JP2 image
  kdu_compress_iiif =
    %Q|kdu_compress -rate 0.5 \
     -precise \
     Clevels=6 "Cblk={64,64}" \
     -jp2_space sRGB \
     Cuse_sop=yes Cuse_eph=yes Corder=RLCP ORGgen_plt=yes ORGtparts=R \
     "Stiles={1024,1024}" \
     -double_buffering 10 \
     -num_threads 4 \
     Creversible=no \
     -no_weights \
      -i #{tmp_tif.path} -o #{iiif_jp2_filepath}|

  `#{kdu_compress_iiif}`

  # Create the Djatoka JP2 image
  kdu_compress_djatoka =
    %Q| kdu_compress -rate 0.5 Clayers=1 Clevels=7 "Cprecincts={256,256},{256,256},{256,256},{128,128},{128,128},{64,64},{64,64},{32,32},{16,16}" "Corder=RPCL" "ORGgen_plt=yes" "ORGtparts=R" "Cblk={32,32}" Cuse_sop=yes -i #{tmp_tif.path} -o #{djatoka_jp2_filepath}
    |

  `#{kdu_compress_djatoka}`

  # Do the JP2 files exist. If both exist and the IIIF PNG parses it is a
  # success!
  if File.size?(iiif_jp2_filepath) && File.size?(djatoka_jp2_filepath) && iiif_png_parses?(basename)
    # move the tif to the success directory for later deletion
    # FileUtils.mv tif_path, File.join(base_completed_directory, 'success', "#{basename}.tif")

    # WARNING: The successful TIF will now be removed. This might not be what we
    # want in the future.
    FileUtils.rm tif_path

    success_log.puts basename
    success_count += 1

  else # failure :(
    error_to_log = create_error_log_line(basename, iiif_jp2_filepath, djatoka_jp2_filepath)
    error_log.puts "#{basename} #{error_to_log}"
    error_count += 1
    # Clean up
    # remove the created JP2s since they ought not to be published
    File.unlink iiif_jp2_filepath
    File.unlink djatoka_jp2_filepath
    # Move the tif to the error directory to make it easier to find for troubleshooting.
    FileUtils.mv tif_path, File.join(base_completed_directory, 'error', "#{basename}.tif")
  end

  # Either way we ought to remove the temporary tif image
  tmp_tif.close
  tmp_tif.unlink
end

# close the log files
error_log.close
success_log.close

# Email the log files out
mail_body = "JP2 processing Job\nStart:#{current_date_for_log_path}\nCompleted:#{DateTime.now.iso8601}\n\nTotal TIFs: #{tif_paths.length}\nErrors: #{error_count}\nSuccesses:#{success_count}"

mail = Mail.new do
  from     'jnronall@ncsu.edu'
  to       email_addresses.join(', ')
  subject  'JP2 processing job completed'
  body     mail_body
  add_file process_jp2s_error_log_path
  add_file process_jp2s_success_log_path
end

# mail.delivery_method :sendmail
mail.deliver!

flock_file.flock(File::LOCK_UN)

# TODO: Is a check of the TIF like this necessary still?
# def check_file
#   # It _should_fail if it has spaces, but should never get to this point having spaces.
#   output = `identify "#{file_path}" 2>&1`
#   if output.include?("identify: ") and
#     !output.include?('wrong data type 7 for "RichTIFFIPTC"; tag ignored.') and
#     !output.include?('incorrect count for field "MinSampleValue"') and
#     !output.include?('incorrect count for field "MaxSampleValue"') and
#     !output.include?('wrong data type 6 for "Photoshop"; tag ignored.') and
#     !output.include?('unknown field with tag 37724')
#     raise Kakadoer::MalformedImageError
#   end
# end
